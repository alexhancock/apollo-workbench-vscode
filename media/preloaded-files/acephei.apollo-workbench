{"graphName":"acephei","operations":{"ios_MeIdentity":"query ios_MeIdentity {\n  me {\n    __typename\n    id\n    name\n    username\n  }\n}\n","ios_MyReviews":"query ios_MyReviews {\n  me {\n    __typename\n    id\n    name\n    reviews {\n      __typename\n      author {\n        __typename\n        name\n      }\n      body\n      id\n      product {\n        __typename\n        name\n        price\n        upc\n      }\n    }\n    username\n  }\n}\n","ios_TopProducts":"query ios_TopProducts {\n  topProducts {\n    __typename\n    name\n    price\n    reviews {\n      __typename\n      author {\n        __typename\n        id\n        name\n        username\n      }\n      body\n      id\n    }\n    upc\n  }\n}\n","web_GetTopProducts":"query web_GetTopProducts {\n  topProducts {\n    __typename\n    name\n    price\n    reviews {\n      __typename\n      author {\n        __typename\n        username\n      }\n      body\n      id\n    }\n    upc\n  }\n}\n","web_MeIdentity":"query web_MeIdentity {\n  me {\n    __typename\n    id\n    name\n    username\n  }\n}\n","web_MyReviews":"query web_MyReviews {\n  products {\n    edges {\n      product {\n        name\n        price\n      }\n    }\n  }\n}\n"},"queryPlans":{"ios_MeIdentity":"QueryPlan {\n  Fetch(service: \"accounts\") {\n    {\n      me {\n        __typename\n        id\n        name\n        username\n      }\n    }\n  },\n}","ios_MyReviews":"QueryPlan {\n  Sequence {\n    Fetch(service: \"accounts\") {\n      {\n        me {\n          __typename\n          id\n          name\n          username\n        }\n      }\n    },\n    Flatten(path: \"me\") {\n      Fetch(service: \"reviews\") {\n        {\n          ... on User {\n            __typename\n            id\n          }\n        } =>\n        {\n          ... on User {\n            reviews {\n              __typename\n              author {\n                __typename\n                id\n              }\n              body\n              id\n              product {\n                __typename\n                ... on Book {\n                  __typename\n                  isbn\n                }\n                ... on Furniture {\n                  __typename\n                  upc\n                }\n              }\n            }\n          }\n        }\n      },\n    },\n    Parallel {\n      Flatten(path: \"me.reviews.@.author\") {\n        Fetch(service: \"accounts\") {\n          {\n            ... on User {\n              __typename\n              id\n            }\n          } =>\n          {\n            ... on User {\n              name\n            }\n          }\n        },\n      },\n      Sequence {\n        Flatten(path: \"me.reviews.@.product\") {\n          Fetch(service: \"books\") {\n            {\n              ... on Book {\n                __typename\n                isbn\n              }\n            } =>\n            {\n              ... on Book {\n                __typename\n                isbn\n                title\n                year\n              }\n            }\n          },\n        },\n        Flatten(path: \"me.reviews.@.product\") {\n          Fetch(service: \"products\") {\n            {\n              ... on Book {\n                __typename\n                isbn\n                title\n                year\n              }\n            } =>\n            {\n              ... on Book {\n                name\n              }\n            }\n          },\n        },\n      },\n      Flatten(path: \"me.reviews.@.product\") {\n        Fetch(service: \"products\") {\n          {\n            ... on Furniture {\n              __typename\n              upc\n            }\n            ... on Book {\n              __typename\n              isbn\n            }\n          } =>\n          {\n            ... on Furniture {\n              name\n              price\n            }\n            ... on Book {\n              price\n              upc\n            }\n          }\n        },\n      },\n    },\n  },\n}","ios_TopProducts":"QueryPlan {\n  Sequence {\n    Fetch(service: \"products\") {\n      {\n        topProducts {\n          __typename\n          ... on Book {\n            __typename\n            isbn\n            price\n            upc\n          }\n          ... on Furniture {\n            name\n            price\n            __typename\n            upc\n          }\n        }\n      }\n    },\n    Parallel {\n      Sequence {\n        Flatten(path: \"topProducts.@\") {\n          Fetch(service: \"books\") {\n            {\n              ... on Book {\n                __typename\n                isbn\n              }\n            } =>\n            {\n              ... on Book {\n                __typename\n                isbn\n                title\n                year\n              }\n            }\n          },\n        },\n        Flatten(path: \"topProducts.@\") {\n          Fetch(service: \"products\") {\n            {\n              ... on Book {\n                __typename\n                isbn\n                title\n                year\n              }\n            } =>\n            {\n              ... on Book {\n                name\n              }\n            }\n          },\n        },\n      },\n      Sequence {\n        Flatten(path: \"topProducts.@\") {\n          Fetch(service: \"reviews\") {\n            {\n              ... on Book {\n                __typename\n                isbn\n              }\n              ... on Furniture {\n                __typename\n                upc\n              }\n            } =>\n            {\n              ... on Book {\n                reviews {\n                  __typename\n                  author {\n                    __typename\n                    id\n                    username\n                  }\n                  body\n                  id\n                }\n              }\n              ... on Furniture {\n                reviews {\n                  __typename\n                  author {\n                    __typename\n                    id\n                    username\n                  }\n                  body\n                  id\n                }\n              }\n            }\n          },\n        },\n        Parallel {\n          Flatten(path: \"topProducts.@.reviews.@.author\") {\n            Fetch(service: \"accounts\") {\n              {\n                ... on User {\n                  __typename\n                  id\n                }\n              } =>\n              {\n                ... on User {\n                  name\n                }\n              }\n            },\n          },\n          Flatten(path: \"topProducts.@.reviews.@.author\") {\n            Fetch(service: \"accounts\") {\n              {\n                ... on User {\n                  __typename\n                  id\n                }\n              } =>\n              {\n                ... on User {\n                  name\n                }\n              }\n            },\n          },\n        },\n      },\n    },\n  },\n}","web_GetTopProducts":"QueryPlan {\n  Sequence {\n    Fetch(service: \"products\") {\n      {\n        topProducts {\n          __typename\n          ... on Book {\n            __typename\n            isbn\n            price\n            upc\n          }\n          ... on Furniture {\n            name\n            price\n            __typename\n            upc\n          }\n        }\n      }\n    },\n    Parallel {\n      Sequence {\n        Flatten(path: \"topProducts.@\") {\n          Fetch(service: \"books\") {\n            {\n              ... on Book {\n                __typename\n                isbn\n              }\n            } =>\n            {\n              ... on Book {\n                __typename\n                isbn\n                title\n                year\n              }\n            }\n          },\n        },\n        Flatten(path: \"topProducts.@\") {\n          Fetch(service: \"products\") {\n            {\n              ... on Book {\n                __typename\n                isbn\n                title\n                year\n              }\n            } =>\n            {\n              ... on Book {\n                name\n              }\n            }\n          },\n        },\n      },\n      Flatten(path: \"topProducts.@\") {\n        Fetch(service: \"reviews\") {\n          {\n            ... on Book {\n              __typename\n              isbn\n            }\n            ... on Furniture {\n              __typename\n              upc\n            }\n          } =>\n          {\n            ... on Book {\n              reviews {\n                __typename\n                author {\n                  __typename\n                  username\n                }\n                body\n                id\n              }\n            }\n            ... on Furniture {\n              reviews {\n                __typename\n                author {\n                  __typename\n                  username\n                }\n                body\n                id\n              }\n            }\n          }\n        },\n      },\n    },\n  },\n}","web_MeIdentity":"QueryPlan {\n  Fetch(service: \"accounts\") {\n    {\n      me {\n        __typename\n        id\n        name\n        username\n      }\n    }\n  },\n}","web_MyReviews":"QueryPlan {\n  Sequence {\n    Fetch(service: \"products\") {\n      {\n        products {\n          edges {\n            product {\n              __typename\n              ... on Book {\n                __typename\n                isbn\n                price\n              }\n              ... on Furniture {\n                name\n                price\n              }\n            }\n          }\n        }\n      }\n    },\n    Flatten(path: \"products.edges.@.product\") {\n      Fetch(service: \"books\") {\n        {\n          ... on Book {\n            __typename\n            isbn\n          }\n        } =>\n        {\n          ... on Book {\n            __typename\n            isbn\n            title\n            year\n          }\n        }\n      },\n    },\n    Flatten(path: \"products.edges.@.product\") {\n      Fetch(service: \"products\") {\n        {\n          ... on Book {\n            __typename\n            isbn\n            title\n            year\n          }\n        } =>\n        {\n          ... on Book {\n            name\n          }\n        }\n      },\n    },\n  },\n}"},"schemas":{"reviews":{"sdl":"extend type Book implements Product @key(fields: \"isbn\") {\n  isbn: String! @external\n  similarBooks: [Book] @external\n  reviews: [Review]\n  reviewList(first: Int = 5, after: Int = 0): ReviewConnection\n\n  \"\"\"\n  relatedReviews for a book use the knowledge of `similarBooks` from the books\n  service to return related reviews that may be of interest to the user\n  \"\"\"\n  relatedReviews(first: Int = 5, after: Int = 0): ReviewConnection\n    @requires(fields: \"similarBooks { isbn }\")\n}\n\nextend type Furniture implements Product @key(fields: \"upc\") {\n  upc: String! @external\n  reviews: [Review]\n  reviewList(first: Int = 5, after: Int = 0): ReviewConnection\n}\n\ntype PageInfo {\n  hasNextPage: Boolean\n  hasPreviousPage: Boolean\n}\n\nextend interface Product {\n  \"\"\"\n  A simple list of all reviews for a product\n  \"\"\"\n  reviews: [Review]\n    @deprecated(\n      reason: \"The `reviews` field on product is deprecated to roll over the return\\ntype from a simple list to a paginated list. The easiest way to fix your\\noperations is to alias the new field `reviewList` to `review`:\\n\\n  {\\n    ... on Product {\\n      reviews: reviewList {\\n        edges {\\n          review {\\n            body\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\nOnce all clients have updated, we will roll over this field and deprecate\\n`reviewList` in favor of the field name `reviews` again\"\n    )\n\n  \"\"\"\n  A paginated list of reviews. This field naming is temporary while all clients\n  migrate off of the un-paginated version of this field call reviews. To ease this migration,\n  alias your usage of `reviewList` to `reviews` so that after the roll over is finished, you\n  can remove the alias and use the final field name:\n\n    {\n      ... on Product {\n        reviews: reviewList {\n          edges {\n            review {\n              body\n            }\n          }\n        }\n      }\n    }\n  \"\"\"\n  reviewList(first: Int = 5, after: Int = 0): ReviewConnection\n}\n\n\"\"\"\nA review is any feedback about products across the graph\n\"\"\"\ntype Review @key(fields: \"id\") {\n  id: ID!\n\n  \"\"\"\n  The plain text version of the review\n  \"\"\"\n  body: String\n\n  \"\"\"\n  The user who authored the review\n  \"\"\"\n  author: User @provides(fields: \"username\")\n\n  \"\"\"\n  The product which this review is about\n  \"\"\"\n  product: Product\n}\n\n\"\"\"\nA connection wrapper for lists of reviews\n\"\"\"\ntype ReviewConnection {\n  \"\"\"\n  Helpful metadata about the connection\n  \"\"\"\n  pageInfo: PageInfo\n\n  \"\"\"\n  List of reviews returned by the search\n  \"\"\"\n  edges: [ReviewEdge]\n}\n\n\"\"\"\nA connection edge for the Review type\n\"\"\"\ntype ReviewEdge {\n  review: Review\n}\n\nextend type User @key(fields: \"id\") {\n  id: ID! @external\n  username: String @external\n\n  \"\"\"\n  A list of all reviews by the user\n  \"\"\"\n  reviews: [Review]\n}\n","shouldMock":true},"books":{"sdl":"\"The basic book in the graph\"\ntype Book @key(fields: \"isbn\") {\n  \"All books can be found by an isbn\"\n  isbn: String!\n  \"The title of the book\"\n  title: String\n  \"The year the book was published\"\n  year: Int\n  \"A simple list of similar books\"\n  similarBooks: [Book]\n}\n","shouldMock":true},"products":{"sdl":"\"Information about the brand Amazon\"\ntype Amazon {\n  \"The url of a referrer for a product\"\n  referrer: String\n}\n\nextend type Book implements Product @key(fields: \"isbn\") {\n  isbn: String! @external\n  title: String @external\n  year: Int @external\n  \"Since books are now products, we can also use their upc as a primary id\"\n  upc: String!\n  \"The name of a book is the book's title + year published\"\n  name(delimeter: String = \" \"): String @requires(fields: \"title year\")\n  price: Int\n  weight: Int\n}\n\n\"A union of all brands represented within the store\"\nunion Brand = Ikea | Amazon\n\n\"\"\"\nThe Furniture type represents all products which are items\nof furniture.\n\"\"\"\ntype Furniture implements Product @key(fields: \"upc\") @key(fields: \"sku\") {\n  \"The modern primary identifier for furniture\"\n  upc: String!\n  \"The SKU field is how furniture was previously stored, and still exists in some legacy systems\"\n  sku: String!\n  name: String\n  price: Int\n  \"The brand of furniture\"\n  brand: Brand\n  weight: Int\n}\n\n\"Information about the brand Ikea\"\ntype Ikea {\n  \"Which asile to find an item\"\n  asile: Int\n}\n\n\"\"\"\nThe PageInfo type provides pagination helpers for determining\nif more data can be fetched from the list\n\"\"\"\ntype PageInfo {\n  \"More items exist in the list\"\n  hasNextPage: Boolean\n  \"Items earlier in the list exist\"\n  hasPreviousPage: Boolean\n}\n\n\"The Product type represents all products within the system\"\ninterface Product {\n  \"The primary identifier of products in the graph\"\n  upc: String!\n  \"The display name of the product\"\n  name: String\n  \"A simple integer price of the product in US dollars\"\n  price: Int\n  \"How much the product weighs in kg\"\n  weight: Int @deprecated(reason: \"Not all product's have a weight\")\n}\n\n\"A connection wrapper for lists of products\"\ntype ProductConnection {\n  \"Helpful metadata about the connection\"\n  pageInfo: PageInfo\n  \"List of products returned by the search\"\n  edges: [ProductEdge]\n}\n\n\"A connection edge for the Product type\"\ntype ProductEdge {\n  product: Product\n}\n\nenum ProductType {\n  LATEST\n  TRENDING\n}\n\nextend type Query {\n  \"Fetch a simple list of products with an offset\"\n  topProducts(first: Int = 5): [Product] @deprecated(reason: \"Use `products` instead\")\n  \"Fetch a paginated list of products based on a filter type.\"\n  products(first: Int = 5, after: Int = 0, type: ProductType): ProductConnection\n}\n","shouldMock":true},"accounts":{"sdl":"directive @schemaChanged on FIELD_DEFINITION\n\nextend type Query {\n  \"\"\"\n  The currently authenticated user root. All nodes off of this\n  root will be authenticated as the current user\n  \"\"\"\n  me: User\n}\n\n\"\"\"The base User in Acephei\"\"\"\ntype User @key(fields: \"id\") {\n  \"\"\"A globally unique id for the user\"\"\"\n  id: ID!\n\n  \"\"\"The users full name as provided\"\"\"\n  name: String\n\n  \"\"\"The account username of the user\"\"\"\n  username: String\n}\n","shouldMock":true}},"composedSchema":"schema\n  @graph(name: \"reviews\", url: \"undefined\")\n  @graph(name: \"books\", url: \"undefined\")\n  @graph(name: \"products\", url: \"undefined\")\n  @graph(name: \"accounts\", url: \"undefined\")\n  @composedGraph(version: 1)\n{\n  query: Query\n}\n\ndirective @composedGraph(version: Int!) on SCHEMA\n\ndirective @graph(name: String!, url: String!) on SCHEMA\n\ndirective @owner(graph: String!) on OBJECT\n\ndirective @key(fields: String!, graph: String!) on OBJECT\n\ndirective @resolve(graph: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: String!) on FIELD_DEFINITION\n\ndirective @requires(fields: String!) on FIELD_DEFINITION\n\n\"\"\"Information about the brand Amazon\"\"\"\ntype Amazon {\n  \"\"\"The url of a referrer for a product\"\"\"\n  referrer: String\n}\n\n\"\"\"The basic book in the graph\"\"\"\ntype Book implements Product\n  @owner(graph: \"books\")\n  @key(fields: \"{ isbn }\", graph: \"books\")\n  @key(fields: \"{ isbn }\", graph: \"reviews\")\n  @key(fields: \"{ isbn }\", graph: \"products\")\n{\n  \"\"\"All books can be found by an isbn\"\"\"\n  isbn: String!\n\n  \"\"\"The title of the book\"\"\"\n  title: String\n\n  \"\"\"The year the book was published\"\"\"\n  year: Int\n\n  \"\"\"A simple list of similar books\"\"\"\n  similarBooks: [Book]\n  reviews: [Review] @resolve(graph: \"reviews\")\n  reviewList(first: Int = 5, after: Int = 0): ReviewConnection @resolve(graph: \"reviews\")\n\n  \"\"\"\n  relatedReviews for a book use the knowledge of `similarBooks` from the books\n  service to return related reviews that may be of interest to the user\n  \"\"\"\n  relatedReviews(first: Int = 5, after: Int = 0): ReviewConnection @resolve(graph: \"reviews\") @requires(fields: \"{ similarBooks { isbn } }\")\n\n  \"\"\"\n  Since books are now products, we can also use their upc as a primary id\n  \"\"\"\n  upc: String! @resolve(graph: \"products\")\n\n  \"\"\"The name of a book is the book's title + year published\"\"\"\n  name(delimeter: String = \" \"): String @resolve(graph: \"products\") @requires(fields: \"{ title year }\")\n  price: Int @resolve(graph: \"products\")\n  weight: Int @resolve(graph: \"products\")\n}\n\n\"\"\"A union of all brands represented within the store\"\"\"\nunion Brand = Ikea | Amazon\n\n\"\"\"\nThe Furniture type represents all products which are items\nof furniture.\n\"\"\"\ntype Furniture implements Product\n  @owner(graph: \"products\")\n  @key(fields: \"{ upc }\", graph: \"products\")\n  @key(fields: \"{ sku }\", graph: \"products\")\n  @key(fields: \"{ upc }\", graph: \"reviews\")\n{\n  \"\"\"The modern primary identifier for furniture\"\"\"\n  upc: String!\n\n  \"\"\"\n  The SKU field is how furniture was previously stored, and still exists in some legacy systems\n  \"\"\"\n  sku: String!\n  name: String\n  price: Int\n\n  \"\"\"The brand of furniture\"\"\"\n  brand: Brand\n  weight: Int\n  reviews: [Review] @resolve(graph: \"reviews\")\n  reviewList(first: Int = 5, after: Int = 0): ReviewConnection @resolve(graph: \"reviews\")\n}\n\n\"\"\"Information about the brand Ikea\"\"\"\ntype Ikea {\n  \"\"\"Which asile to find an item\"\"\"\n  asile: Int\n}\n\n\"\"\"\nThe PageInfo type provides pagination helpers for determining\nif more data can be fetched from the list\n\"\"\"\ntype PageInfo {\n  \"\"\"More items exist in the list\"\"\"\n  hasNextPage: Boolean\n\n  \"\"\"Items earlier in the list exist\"\"\"\n  hasPreviousPage: Boolean\n}\n\n\"\"\"The Product type represents all products within the system\"\"\"\ninterface Product {\n  \"\"\"The primary identifier of products in the graph\"\"\"\n  upc: String!\n\n  \"\"\"The display name of the product\"\"\"\n  name: String\n\n  \"\"\"A simple integer price of the product in US dollars\"\"\"\n  price: Int\n\n  \"\"\"How much the product weighs in kg\"\"\"\n  weight: Int @deprecated(reason: \"Not all product's have a weight\")\n\n  \"\"\"A simple list of all reviews for a product\"\"\"\n  reviews: [Review] @deprecated(reason: \"The `reviews` field on product is deprecated to roll over the return\\ntype from a simple list to a paginated list. The easiest way to fix your\\noperations is to alias the new field `reviewList` to `review`:\\n\\n  {\\n    ... on Product {\\n      reviews: reviewList {\\n        edges {\\n          review {\\n            body\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\nOnce all clients have updated, we will roll over this field and deprecate\\n`reviewList` in favor of the field name `reviews` again\")\n\n  \"\"\"\n  A paginated list of reviews. This field naming is temporary while all clients\n  migrate off of the un-paginated version of this field call reviews. To ease this migration,\n  alias your usage of `reviewList` to `reviews` so that after the roll over is finished, you\n  can remove the alias and use the final field name:\n  \n    {\n      ... on Product {\n        reviews: reviewList {\n          edges {\n            review {\n              body\n            }\n          }\n        }\n      }\n    }\n  \"\"\"\n  reviewList(first: Int = 5, after: Int = 0): ReviewConnection\n}\n\n\"\"\"A connection wrapper for lists of products\"\"\"\ntype ProductConnection {\n  \"\"\"Helpful metadata about the connection\"\"\"\n  pageInfo: PageInfo\n\n  \"\"\"List of products returned by the search\"\"\"\n  edges: [ProductEdge]\n}\n\n\"\"\"A connection edge for the Product type\"\"\"\ntype ProductEdge {\n  product: Product\n}\n\nenum ProductType {\n  LATEST\n  TRENDING\n}\n\ntype Query {\n  \"\"\"Fetch a simple list of products with an offset\"\"\"\n  topProducts(first: Int = 5): [Product] @deprecated(reason: \"Use `products` instead\") @resolve(graph: \"products\")\n\n  \"\"\"Fetch a paginated list of products based on a filter type.\"\"\"\n  products(first: Int = 5, after: Int = 0, type: ProductType): ProductConnection @resolve(graph: \"products\")\n\n  \"\"\"\n  The currently authenticated user root. All nodes off of this\n  root will be authenticated as the current user\n  \"\"\"\n  me: User @resolve(graph: \"accounts\")\n}\n\n\"\"\"A review is any feedback about products across the graph\"\"\"\ntype Review\n  @owner(graph: \"reviews\")\n  @key(fields: \"{ id }\", graph: \"reviews\")\n{\n  id: ID!\n\n  \"\"\"The plain text version of the review\"\"\"\n  body: String\n\n  \"\"\"The user who authored the review\"\"\"\n  author: User @provides(fields: \"{ username }\")\n\n  \"\"\"The product which this review is about\"\"\"\n  product: Product\n}\n\n\"\"\"A connection wrapper for lists of reviews\"\"\"\ntype ReviewConnection {\n  \"\"\"Helpful metadata about the connection\"\"\"\n  pageInfo: PageInfo\n\n  \"\"\"List of reviews returned by the search\"\"\"\n  edges: [ReviewEdge]\n}\n\n\"\"\"A connection edge for the Review type\"\"\"\ntype ReviewEdge {\n  review: Review\n}\n\n\"\"\"The base User in Acephei\"\"\"\ntype User\n  @owner(graph: \"accounts\")\n  @key(fields: \"{ id }\", graph: \"accounts\")\n  @key(fields: \"{ id }\", graph: \"reviews\")\n{\n  \"\"\"A globally unique id for the user\"\"\"\n  id: ID!\n\n  \"\"\"The users full name as provided\"\"\"\n  name: String\n\n  \"\"\"The account username of the user\"\"\"\n  username: String\n\n  \"\"\"A list of all reviews by the user\"\"\"\n  reviews: [Review] @resolve(graph: \"reviews\")\n}\n"}